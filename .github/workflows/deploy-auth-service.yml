name: Build, Push, and Deploy All Microservices Sequentially

on:
  push:
    branches:
      - test
      - main

jobs:
  set-vars:
    runs-on: ubuntu-latest
    outputs:
      deploy-host: ${{ steps.set-vars.outputs.deploy-host }}
      deploy-branch: ${{ steps.set-vars.outputs.deploy-branch }}
      deploy-key-name: ${{ steps.set-vars.outputs.deploy-key-name }}
    steps:
      - id: set-vars
        run: |
          BRANCH=${GITHUB_REF##*/}
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          if [[ "$BRANCH" == "main" ]]; then
            echo "deploy-host=${{ secrets.EC2_HOST_MAIN }}" >> $GITHUB_OUTPUT
            echo "deploy-branch=main" >> $GITHUB_OUTPUT
            echo "deploy-key-name=EC2_SSH_KEY_MAIN" >> $GITHUB_OUTPUT
          else
            echo "deploy-host=${{ secrets.EC2_HOST_TEST }}" >> $GITHUB_OUTPUT
            echo "deploy-branch=test" >> $GITHUB_OUTPUT
            echo "deploy-key-name=EC2_SSH_KEY_TEST" >> $GITHUB_OUTPUT
          fi

  clone-and-deploy:
    needs: set-vars
    runs-on: ubuntu-latest
    env:
      DEPLOY_BRANCH: ${{ needs.set-vars.outputs.deploy-branch }}
    steps:
      - name: Determine host and ssh key
        id: prepare
        run: |
          if [[ "${{ needs.set-vars.outputs.deploy-branch }}" == "main" ]]; then
            echo "DEPLOY_HOST=${{ secrets.EC2_HOST_MAIN }}" >> $GITHUB_ENV
            echo "${{ secrets.EC2_SSH_KEY_MAIN }}" > private_key.pem
          else
            echo "${{ secrets.EC2_SSH_KEY_TEST }}" > private_key.pem
          fi
          chmod 600 private_key.pem

      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.set-vars.outputs.deploy-host }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets[needs.set-vars.outputs.deploy-key-name] }}
          script: |
            REPO_CODE="https://github.com/Bryan03A/UsersDomain.git"
            REPO_ENVS="https://${{ secrets.ENV_REPO_TOKEN }}@github.com/Bryan03A/DomainUsers-envs.git"

            mkdir -p ~/deploy-code ~/deploy-envs

            cd ~/deploy-code
            git clone -b $DEPLOY_BRANCH "$REPO_CODE" UsersDomain

            cd ~/deploy-envs
            git clone "$REPO_ENVS" DomainUsers-envs

            if [ -d ~/deploy-envs/DomainUsers-envs/UserDomain ]; then
              cp -rf ~/deploy-envs/DomainUsers-envs/UserDomain/. ~/deploy-code/UsersDomain/
            fi

            docker login -u bfury0329 -p "${{ secrets.DOCKER_HUB_PASSWORD }}"
            docker network inspect app-network >/dev/null 2>&1 || docker network create app-network

            cd ~/deploy-code/UsersDomain
            for dir in */ ; do
              service=$(basename "$dir")
              if [ -f "$dir/Dockerfile" ]; then
                echo "⚙️ Processing $service ..."
                docker build -t bfury0329/${service}:latest "./$dir"
                docker push bfury0329/${service}:latest
                docker rm -f "${service}" 2>/dev/null || true

                port=$(grep -i '^EXPOSE' "$dir/Dockerfile" | head -n1 | awk '{print $2}')
                [ -z "$port" ] && port=7000
                docker run -d --name "${service}" --network app-network -p ${port}:${port} bfury0329/${service}:latest
              fi
            done

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs:
      - set-vars
      - clone-and-deploy
    env:
      DEPLOY_BRANCH: ${{ needs.set-vars.outputs.deploy-branch }}
    steps:
      - name: Determine host and write SSH key
        run: |
          if [[ "${{ needs.set-vars.outputs.deploy-branch }}" == "main" ]]; then
            echo "${{ secrets.EC2_SSH_KEY_MAIN }}" > private_key.pem
          else
            echo "${{ secrets.EC2_SSH_KEY_TEST }}" > private_key.pem
          fi
          chmod 600 private_key.pem

      - name: Clean temp folders and Docker
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.set-vars.outputs.deploy-host }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets[needs.set-vars.outputs.deploy-key-name] }}
          script: |
            echo "🧹 Cleaning up temporary deployment folders..."
            rm -rf ~/deploy-code ~/deploy-envs
            echo "✅ Folders cleaned."
            echo "🧽 Removing dangling Docker images..."
            docker rmi $(docker images -f "dangling=true" -q) 2>/dev/null || echo "No dangling images to remove."
            echo "✅ Docker cleanup complete."